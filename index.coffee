fs = require('fs')
path = require('path')
recursiveReaddir = require('recursive-readdir')
Exercise = require('./exercise')

# name of the directory in the content package that contains the exercises (XML files)
exercisesDirName = 'exercises'

# cache parsed XML exercise definitions
exerciseCache = {}

Pointandclick =

  # Registers the content type at server startup
  register: (handlers, app, conf) ->
    handlers.contentTypes.pointandclick = Pointandclick
    fs.mkdir(conf.logDirectory + "/#{ Pointandclick.namespace }/", 0o0775, ((err) -> ))
    Pointandclick.config = conf
    Pointandclick.handlers = handlers
    
  
  # Adds a content package (at server startup)
  registerContentPackage: (contentPackagePrototype, contentPackageDir) ->
    # Autodiscover exercises: any XML file in the content package directory "exercises"
    # is assumed to be an exercise (with a corresponding JSON file). The files may be nested
    # in subdirectories.
    exercisesDir = path.join(contentPackageDir, exercisesDirName)
    recursiveReaddir(exercisesDir, (err, files) ->
      # files include only files, no directories
      if err
        console.error err
        throw err
      order = 0
      for filepath in files
        if (/\.xml$/.test(filepath))
          # since XML files in different subdirectories might be using the same filename,
          # we must keep the directory path in the exercise name (unique identifier within
          # the content package). Slash / characters are replaced with dashes - so that
          # the exercise names do not mess up URL paths. Assume that the XML files
          # are named without any dashes "-".
          # Remove the leading directory path so that the path inside the exercises directory is left.
          filepath = filepath.substring(exercisesDir.length + 1)
          filepath = filepath.replace(new RegExp(path.sep, 'g'), '-') # replace / with -
          
          # Get the filename without the extension
          exerciseName = filepath.substring(0, filepath.length - 4)
          
          contentPackagePrototype.meta.contents[exerciseName] = {
            'title': exerciseName,
            'description': '',
            'order': order++
          }
          
          contentPackagePrototype.meta.teaserContent.push(exerciseName)
    )

    
  # Initializes the exercise (called when a user starts an exercise)
  initialize: (req, params, handlers, cb) ->
    contentPackage = handlers.contentPackages[req.params.contentPackage]
    
    readExerciseXML = (exerciseName, cache) ->
      filepath = exerciseName.replace(/-/g, path.sep) # replace - with /
      fs.readFile path.join(contentPackage.getDir(), exercisesDirName, filepath + '.xml'), 'utf8', (err, xml_data) ->
        if err
          # no exercise file with this name, or other IO error
          # a user could manipulate URLs and probe different values
          console.error err
          handlers.contentTypes.pointandclick.renderError(err, params)
          cb()
        Exercise.parseXml xml_data, (err, tree, head) ->
          if err
            handlers.contentTypes.pointandclick.renderError(err, params)
            cb()
          else
            # JSON file contains data for the clickable elements (correct/wrong, feedback, ...)
            userDefinedJsonFilepath = path.join(contentPackage.getDir(), exercisesDirName, filepath + '.json')
            
            cache.headContent = if head? then head.html(omitRoot: true) else ''
            cache.headContent += '\n<link href="/static/pointandclick/style.css" rel="stylesheet">' +
                '\n<script src="/static/pointandclick/pointandclick.js" type="text/javascript"></script>'

            fs.readFile userDefinedJsonFilepath, 'utf8', (err, data) ->
              if err
                payload = {}
              else
                payload = JSON.parse data
                
              # Add autogenerated payload
              payload = Exercise.jsonPayload(payload, tree)

              cache.headContent += '\n<script type="text/javascript">\nwindow.pointandclick = ' + JSON.stringify(payload) + ';\n</script>\n'
    
              cache.bodyContent = '<div class="pointandclick">\n' +
                tree.html(omitRoot: true) +
                '\n\n<div id="pointandclick-feedback"></div><div id="pointandclick-points"></div>\n</div>'
            
              # parsed exercise data was added to the cache, now add it to the response
              params.headContent += cache.headContent
              params.bodyContent += cache.bodyContent
              
              cb()

    
    if !exerciseCache[req.params.contentPackage]?
      exerciseCache[req.params.contentPackage] = {}
    if !exerciseCache[req.params.contentPackage][params.name]?
      # not cached yet
      exerciseCache[req.params.contentPackage][params.name] = {}
      readExerciseXML params['name'], exerciseCache[req.params.contentPackage][params.name]
    else
      cachedVal = exerciseCache[req.params.contentPackage][params.name]
      params.headContent += cachedVal.headContent
      params.bodyContent += cachedVal.bodyContent
      # assume that the content package does not need to initialize anything (this content type takes
      # care of everything), so do not call the initialize function from the content package
      cb()

  renderError: (error, params) ->
    params.bodyContent = "<div class='alert-danger'>\n" + error.toString() + "\n</div>"


  handleEvent: (event, payload, req, res, protocolPayload, responseObj, cb) ->
    dir = Pointandclick.config.logDirectory + "/#{ Pointandclick.namespace }/" + req.params.contentPackage
    # path like log_dir/"contenttype"/"contentpackage", log files for each exercise will be created there
    
    if (event == 'log' &&
        Pointandclick.handlers.contentPackages[req.params.contentPackage].meta.contents[req.params.name]?)
      # log event, checked that the exercise (req.params.name) has been registered in the content package
      fs.mkdir(dir, 0o0775, (err) ->
        if (err && err.code != 'EEXIST')
          # error in creating the directory, the directory does not yet exist
          console.error err
          return
        filename = req.params.name + '.log'
        # the exercise name should be a safe filename for the log file too since
        # the exercise names are based on the XML filenames and the name parameter
        # has already passed the ACOS server URL router regular expression
        data = new Date().toISOString() + ' ' + JSON.stringify(payload) + ' ' + JSON.stringify(protocolPayload || {}) + '\n'
        fs.writeFile(dir + '/' + filename, data, { flag: 'a' }, ((err) -> ))
      )
    
    cb event, payload, req, res, protocolPayload, responseObj
    

  # Metadata
  namespace: 'pointandclick'
  packageType: 'content-type'
  installedContentPackages: []

  meta: {
    'name': 'pointandclick',
    'shortDescription': 'Content type for point-and-click exercises.',
    'description': '',
    'author': 'Tapio Auvinen',
    'license': 'MIT',
    'version': '0.0.1',
    'url': ''
  }


module.exports = Pointandclick
